import fs from 'fs/promises';
import { spawn } from 'child_process';
import chalk from 'chalk';

export async function fileExists(filePath) {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

export function formatOutput(text) {
  return text
    .split('\n')
    .map(line => line.trim() ? `  ${line}` : '')
    .join('\n');
}

export async function commitToGit(filePath) {
  // Input validation to prevent command injection
  if (!filePath || typeof filePath !== 'string') {
    throw new Error('Invalid file path: must be a non-empty string');
  }
  
  // Check for dangerous characters and path traversal attempts
  if (filePath.includes('..') || /[;&|`$(){}[\]\\<>'"*?]/.test(filePath)) {
    throw new Error('Invalid file path: contains potentially dangerous characters');
  }
  
  // Ensure the file path is not absolute and doesn't start with special characters
  if (filePath.startsWith('/') || filePath.startsWith('~') || filePath.startsWith('-')) {
    throw new Error('Invalid file path: must be a relative path');
  }
  
  return new Promise((resolve, reject) => {
    const git = spawn('git', ['add', filePath], { stdio: 'pipe', cwd: process.cwd() });
    
    git.on('close', (code) => {
      if (code !== 0) {
        console.log(chalk.yellow('⚠️  Failed to add file to Git'));
        resolve();
        return;
      }
      
      const commit = spawn('git', ['commit', '-m', 'Add Claude profile generated by claude-profile-cli'], { stdio: 'pipe', cwd: process.cwd() });
      
      commit.on('close', (commitCode) => {
        if (commitCode === 0) {
          console.log(chalk.green('✅ Committed to Git'));
        } else {
          console.log(chalk.yellow('⚠️  Failed to commit to Git'));
        }
        resolve();
      });
      
      commit.on('error', () => {
        console.log(chalk.yellow('⚠️  Git not available'));
        resolve();
      });
    });
    
    git.on('error', () => {
      console.log(chalk.yellow('⚠️  Git not available'));
      resolve();
    });
  });
}